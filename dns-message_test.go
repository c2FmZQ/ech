package ech

import (
	"net"
	"reflect"
	"testing"
)

func TestDNSMessageA(t *testing.T) {
	m := []byte{
		0x00, 0x00, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
		0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
		0xc0, 0xc, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x28, 0x0, 0x4, 0x8e, 0xfa, 0xb0, 0x4,
	}
	got, err := decodeDNSMessage(m)
	if err != nil {
		t.Fatalf("decodeDNSMessage: %v", err)
	}
	want := dnsMessage{
		id:     0x0,
		qr:     0x1,
		opCode: 0x0,
		aa:     0x0,
		tc:     0x0,
		rd:     0x1,
		ra:     0x1,
		z:      0x0,
		rCode:  0x0,
		question: []dnsQuestion{
			dnsQuestion{
				name:  "www.google.com",
				typ:   0x1,
				class: 0x1,
			},
		},
		answer: []dnsRR{
			dnsRR{
				name:  "www.google.com",
				typ:   0x1,
				class: 0x1,
				ttl:   0x128,
				data:  "142.250.176.4",
			},
		},
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf("Got %#v, want %#v", got, want)
	}
}

func TestDNSMessageAAAA(t *testing.T) {
	m := []byte{
		0x00, 0x00, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
		0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00, 0x01,
		0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x00, 0x10, 0x26, 0x07, 0xf8, 0xb0,
		0x40, 0x07, 0x08, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04,
	}
	got, err := decodeDNSMessage(m)
	if err != nil {
		t.Fatalf("decodeDNSMessage: %v", err)
	}
	want := dnsMessage{
		id:     0x0,
		qr:     0x1,
		opCode: 0x0,
		aa:     0x0,
		tc:     0x0,
		rd:     0x1,
		ra:     0x1,
		z:      0x0,
		rCode:  0x0,
		question: []dnsQuestion{
			dnsQuestion{
				name:  "www.google.com",
				typ:   0x1c,
				class: 0x1,
			},
		},
		answer: []dnsRR{
			dnsRR{
				name:  "www.google.com",
				typ:   0x1c,
				class: 0x1,
				ttl:   0x55,
				data:  "2607:f8b0:4007:818::2004",
			},
		},
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf("Got %#v, want %#v", got, want)
	}
}

func TestDNSMessageHTTPS(t *testing.T) {
	m := []byte{
		0x0, 0x0, 0x81, 0x80, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0xf, 0x74, 0x74, 0x62, 0x74, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x73, 0x3, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x41, 0x0, 0x1, 0xc0, 0xc, 0x0, 0x41, 0x0, 0x1, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x8a, 0x0, 0xc, 0x3, 0x66, 0x6f, 0x6f, 0x0, 0x0, 0x1, 0x0, 0x6, 0x2, 0x68, 0x33, 0x2, 0x68, 0x32, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x2, 0x4, 0xd2, 0x0, 0x4, 0x0, 0x4, 0x7f, 0x0, 0x0, 0x1, 0x0, 0x5, 0x0, 0x4f, 0x0, 0x4d, 0xfe, 0xd, 0x0, 0x49, 0x0, 0x0, 0x20, 0x0, 0x20, 0x2a, 0x2b, 0x6d, 0xd6, 0xd8, 0x7c, 0x63, 0xde, 0x40, 0x88, 0x77, 0xd0, 0x21, 0xd6, 0xb1, 0x3b, 0x13, 0x20, 0x6c, 0x17, 0x25, 0x5a, 0x52, 0x5d, 0x70, 0x4c, 0xbf, 0xdc, 0x11, 0x41, 0x44, 0x41, 0x0, 0xc, 0x0, 0x1, 0x0, 0x3, 0x0, 0x1, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x22, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x0, 0x0, 0x0, 0x6, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
	}
	got, err := decodeDNSMessage(m)
	if err != nil {
		t.Fatalf("decodeDNSMessage: %v", err)
	}
	want := dnsMessage{
		id:     0x0,
		qr:     0x1,
		opCode: 0x0,
		aa:     0x0,
		tc:     0x0,
		rd:     0x1,
		ra:     0x1,
		z:      0x0,
		rCode:  0x0,
		question: []dnsQuestion{
			dnsQuestion{
				name:  "test.ttbtenterprises.com",
				typ:   0x41,
				class: 0x1,
			},
		},
		answer: []dnsRR{
			dnsRR{
				name:  "test.ttbtenterprises.com",
				typ:   0x41,
				class: 0x1,
				ttl:   0x12c,
				data: HTTPS{
					Priority:      0xc,
					Target:        "foo",
					ALPN:          []string{"h3", "h2"},
					NoDefaultALPN: true,
					Port:          0x4d2,
					IPv4Hint:      net.IP{0x7f, 0x0, 0x0, 0x1},
					IPv6Hint:      net.IP{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
					ECH: []uint8{
						0x00, 0x4d, 0xfe, 0x0d, 0x00, 0x49, 0x00, 0x00, 0x20, 0x00, 0x20, 0x2a, 0x2b, 0x6d, 0xd6, 0xd8,
						0x7c, 0x63, 0xde, 0x40, 0x88, 0x77, 0xd0, 0x21, 0xd6, 0xb1, 0x3b, 0x13, 0x20, 0x6c, 0x17, 0x25,
						0x5a, 0x52, 0x5d, 0x70, 0x4c, 0xbf, 0xdc, 0x11, 0x41, 0x44, 0x41, 0x00, 0x0c, 0x00, 0x01, 0x00,
						0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x22, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69,
						0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x0, 0x0,
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf("Got %#v, want %#v", got, want)
	}
}
